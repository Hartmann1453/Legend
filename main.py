# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'untitled2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random
import time
import cv2
import numpy as np
import pyautogui
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtWidgets
from mss import mss
from threading import Thread

def click_start(mob):
    while True:
        if check_fight() != 'Я не в бою': # Проверяем в бою мы или нет
            fight()
        if click_hunt() == 'Вкладка Охота не найдена': # Переходим к Охоте
            continue
        if click_mob(mob) == 'Моб не найден': # Ищем моба и выделяем его
            continue
        if check_mob(mob) == 'Моб не подтвержден': # Проверяем нужный ли моб выбран
            continue
        if click_attack(mob) == 'Моб не найден': # Двойной клик на моба
            continue
        fight() # Вступаем в бой

def fight():
    while True:

        # Отлавливаем промежуточную ошибку.
        check_refresh()

        # Рандомизируем направление атаки.
        rand = random.randint(1, 3)
        if rand == 1:
            click_dd_up()
        elif rand == 2:
            click_dd_mid()
        else:
            click_dd_down()

        # Проверяем окончание боя. Сценарий победы.
        if check_win():
            print('Победа')
            click_exit()
            time.sleep(2) # Пауза необходима. Иначе возвращает программу в бой.
            return

        # Проверяем окончание боя. Сценарий поражения.
        if check_retreat():
            print('Поражение')
            click_exit()
            click_inloc()
            click_reborn()
            return



def error_mob():
    txt = "Вы не выбрали моба."
    guide_box = QMessageBox()

    guide_box.setWindowTitle("Ошибка")
    guide_box.setText(txt)
    guide_box.setIcon(QMessageBox.Warning)

    guide_box.exec_()

def check_win():
    res_x, res_y = find_element('img/default/win.png', 3)
    if res_x == 'Элемент не найден.':
        return False
    else: return True
def check_retreat():
    res_x, res_y = find_element('img/default/retreat.png', 3)
    if res_x == 'Элемент не найден.':
        return False
    else: return True
def check_fight():
    res_x, res_y = find_element('img/default/vs.png', 15)
    print(f'Элемент найден [VS в бою]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return 'Я не в бою'
def check_mob(mob):
    # Ищем иконку моба
    res_x, res_y = find_element(f'img/mobs/{mob}/ico_mob.png', 3)
    print(f'Элемент найден [Иконка {mob}]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return 'Моб не подтвержден'
def check_refresh():
    # Ищем кнопку обновить
    res_x, res_y = find_element('img/default/refresh.png', 2)
    print(f'Элемент найден [Кнопка Обновить]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return 'Ошибки нет.'

    # Выделяем область клика
    x = random.randint(res_x, res_x + 70)
    y = random.randint(res_y, res_y + 15)

    # Кликаем
    pyautogui.click(x, y)
    print('Нажали на элемент [Кнопка Обновить]')

def click_reborn():
    # Ищем кнопку воскреснуть
    res_x, res_y = find_element('img/default/reborn.png', 200)
    print(f'Элемент найден [Кнопка Воскреснуть]. x: {res_x} | y: {res_y}')

    # Выделяем область клика
    x = random.randint(res_x, res_x + 140)
    y = random.randint(res_y, res_y + 15)

    # Кликаем
    pyautogui.click(x, y)
    print('Нажали на элемент [Кнопка Воскреснуть]')
def click_inloc():
    # Ищем кнопку перехода в локацию
    res_x, res_y = find_element('img/default/inloc.png', 200)
    print(f'Элемент найден [Кнопка В локацию]. x: {res_x} | y: {res_y}')

    # Выделяем область клика
    x = random.randint(res_x, res_x + 155)
    y = random.randint(res_y, res_y + 15)

    # Кликаем
    pyautogui.click(x, y)
    print('Нажали на элемент [Кнопка В локацию]')
def click_guide():
    txt = "1.Авторизоваться в игре.\n2.Войти на локацию обитания требуемого моба.\n3.Раскрыть браузер на весь экран.\n4.Нажать кнопку старт.\n5. Отпустить мышку. Бот начнет работу. Требуется чтобы вкладка \"Охота\" была видна."
    guide_box = QMessageBox()

    guide_box.setWindowTitle("Подсказка")
    guide_box.setText(txt)
    guide_box.setIcon(QMessageBox.Information)

    guide_box.exec_()
def click_attack(mob):
    # Ищем кнопку атаки
    res_x, res_y = find_element(f'img/mobs/{mob}/mob.png', 3)
    print(f'Элемент найден [Моб {mob}]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return 'Моб не найден'

    # Создаем область клика.
    x = random.randint(res_x + 20, res_x + 30)
    y = random.randint(res_y - 35, res_y - 25)

    # Кликаем
    pyautogui.click(x, y) # Клик на моба
    time.sleep(0.3)
    pyautogui.click(x, y) # Клик на моба
    print(f'Нажали на элемент [Моб {mob}]')
def click_exit():
    # Ищем кнопку победы
    res_x, res_y = find_element('img/default/exit.png', 30)
    print(f'Элемент найден [Кнопка Выход]. x: {res_x} | y: {res_y}')

    # Выделяем область клика
    x = random.randint(res_x, res_x + 70)
    y = random.randint(res_y, res_y + 10)

    # Кликаем
    pyautogui.click(x, y)
    print('Нажали на элемент [Кнопка Выход]')
def click_dd_up():
    # Ищем кнопку удара
    res_x, res_y = find_element('img/default/dd_up.png', 3)
    print(f'Элемент найден [Удар Вверх]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return

    # Выделяем область клика
    x = random.randint(res_x, res_x + 20)
    y = random.randint(res_y, res_y + 20)

    # Кликаем
    pyautogui.click(x, y) # Клик на удар
    print('Нажали на элемент [Удар Вверх]')
def click_dd_mid():
    # Ищем кнопку удара
    res_x, res_y = find_element('img/default/dd_mid.png', 3)
    print(f'Элемент найден [Удар центр]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return

    # Выделяем область клика
    x = random.randint(res_x, res_x + 20)
    y = random.randint(res_y, res_y + 20)

    # Кликаем
    pyautogui.click(x, y) # Клик на удар
    print('Нажали на элемент [Удар центр]')
def click_dd_down():
    # Ищем кнопку удара
    res_x, res_y = find_element('img/default/dd_down.png', 3)
    print(f'Элемент найден [Удар вниз]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return

    # Выделяем область клика
    x = random.randint(res_x, res_x + 20)
    y = random.randint(res_y, res_y + 20)

    # Кликаем
    pyautogui.click(x, y) # Клик на удар
    print('Нажали на элемент [Удар вниз]')
def click_mob(mob):
    # Ищем моба
    res_x, res_y = find_element(f'img/mobs/{mob}/mob.png', 300)
    print(f'Элемент найден [Моб {mob}]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return 'Вкладка Охота не найдена'

    # Выделяем область клика
    x = random.randint(res_x + 20, res_x + 30)
    y = random.randint(res_y - 35, res_y - 25)

    # Кликаем
    pyautogui.click(x, y) # Клик на моба
    print(f'Нажали на элемент [Моб {mob}]')
def click_hunt():
    res_x, res_y = find_element('img/default/hunt.png', 3)
    print(f'Элемент найден [Кнопка Охоты]. x: {res_x} | y: {res_y}')
    if res_x == 'Элемент не найден.':
        return 'Моб не найден'

    # Выделяем область клика
    x = random.randint(res_x, res_x + 25)
    y = random.randint(res_y, res_y + 25)

    # Кликаем
    pyautogui.click(x, y)
    print('Нажали на элемент [Кнопка Охоты]')

def find_element(template, iteration):

    # Загружаем образец
    template = cv2.imread(template, 0)
    bounding_box = {'top': 0, 'left': 0, 'width': 1365, 'height': 767}
    sct = mss()
    for i in range(iteration):
        # Захват картинки
        sct_img = sct.grab(bounding_box)
        img = np.array(sct_img)
        img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Ищем объект на экране
        res = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)
        loc = np.where(res >= 0.95)
        x, y = 0, 0
        # Берем последнее совпадение и записываем координаты
        for pt in zip(*loc[::-1]):
            x = pt[0]
            y = pt[1]

        if(x != 0 and y != 0):
            return x, y
    return 'Элемент не найден.', 0


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(244, 152)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 40, 222, 61))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")

        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.btn_start = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.btn_start.setObjectName("btn_start")
        self.gridLayout.addWidget(self.btn_start, 1, 1, 1, 1)

        self.btn_guide = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.btn_guide.setObjectName("btn_guide")
        self.gridLayout.addWidget(self.btn_guide, 0, 0, 1, 2)

        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")

        self.comboBox = QtWidgets.QComboBox(self.gridLayoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout.addWidget(self.comboBox)

        self.gridLayout.addLayout(self.verticalLayout, 1, 0, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 244, 21))
        self.menubar.setObjectName("menubar")

        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")

        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setObjectName("menu_2")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.menu.addSeparator()

        self.menubar.addAction(self.menu.menuAction())

        self.menubar.addAction(self.menu_2.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate

        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.btn_start.setText(_translate("MainWindow", "Старт"))

        self.btn_guide.setText(_translate("MainWindow", "Руководство к использованию"))

        self.comboBox.setItemText(0, _translate("MainWindow", "Выберите моба..."))
        self.comboBox.setItemText(1, _translate("MainWindow", "Крэтс [1]"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Бешеный пёс [2]"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Огненная паучиха [3]"))
        self.menu.setTitle(_translate("MainWindow", "Мобы"))
        self.menu_2.setTitle(_translate("MainWindow", "Добыча"))

    def add_functions(self):
        self.btn_start.clicked.connect(self.btn_cl_start)
        self.btn_guide.clicked.connect(self.btn_cl_guide)


    def btn_cl_start(self):
        _translate = QtCore.QCoreApplication.translate

        if(self.comboBox.currentIndex() == 0):
            mob = '0'
            error_mob()
        elif (self.comboBox.currentIndex() == 1):
            mob = 'Crats'
        elif (self.comboBox.currentIndex() == 2):
            mob = 'Angry_Dog'
        elif (self.comboBox.currentIndex() == 3):
            mob = 'Fire_Spider'

        if mob != '0':
            if self.btn_start.text() == 'Старт':
                self.btn_start.setText(_translate("MainWindow", "Бот запущен."))
                th = Thread(target=click_start, args=([mob]), daemon=True)
                th.start()

    def btn_cl_guide(self):
        click_guide()







































if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

